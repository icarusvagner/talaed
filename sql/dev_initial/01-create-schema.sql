---- Base app schema

-- ENUMs
CREATE TYPE user_typ AS ENUM ('Admin', 'Student', 'Teacher');
CREATE TYPE education_level AS ENUM ('Primary', 'Secondary', 'Tertiary', 'Adult', 'Special');
CREATE TYPE login_status AS ENUM ('Online', 'Oncall', 'Offline', 'Busy', 'Pending', 'Inactive', 'Locked');
CREATE TYPE gender AS ENUM ('Male', 'Female', 'Other', 'PreferNotToSay');
-- Device Type (optional: Mobile/Desktop/etc.)
CREATE TYPE device_type AS ENUM ( 'Mobile', 'Desktop', 'Tablet', 'Other' );
-- Platform (optional: OS or environment)
CREATE TYPE platform AS ENUM ( 'Windows', 'MacOS', 'Linux', 'Android', 'IOs', 'Web', 'Other' );

-- USERS: Authentication info
CREATE TABLE users (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email_add VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  password_salt VARCHAR(255),
  token_salt VARCHAR(255),
  is_verified BOOLEAN DEFAULT FALSE,
  is_active BOOLEAN DEFAULT TRUE,
  last_password_change TIMESTAMP,

  -- Timestamps
  cid bigint NOT NULL,
  ctime timestamp with time zone NOT NULL,
  mid bigint NOT NULL,
  mtime timestamp with time zone NOT NULL
);

-- USER DETAILS: Additional profile info (2NF)
CREATE TABLE user_details (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  first_name VARCHAR(255),
  last_name VARCHAR(255),
  middle_name VARCHAR(255),
  user_type user_typ NOT NULL DEFAULT 'Student',
  gender gender,
  dob DATE,
  education_level education_level,
  program VARCHAR(255),
  contact_no VARCHAR(20),

  -- Timestamps
  cid bigint NOT NULL,
  ctime timestamp with time zone NOT NULL,
  mid bigint NOT NULL,
  mtime timestamp with time zone NOT NULL
);

-- LOGIN LOGS: Statuses & access info
CREATE TABLE login_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
  last_logged_in TIMESTAMP DEFAULT current_timestamp,
  status login_status DEFAULT 'Pending',
  attempts SMALLINT DEFAULT 0,
  ip_address INET,
  user_agent TEXT,
  success BOOLEAN DEFAULT FALSE,
  current_datetime TIMESTAMP DEFAULT current_timestamp
);

-- PASSWORD RESET TOKENS: adding password reset/token system
CREATE TABLE password_reset_tokens (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    token UUID NOT NULL UNIQUE,
    expires_at TIMESTAMP NOT NULL,
    used BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT current_timestamp
);

-- ACTIVE SESSION: tracking multi-device session
CREATE TABLE active_sessions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    session_token UUID NOT NULL UNIQUE,
    ip_address INET,
    user_agent TEXT,
    device_name TEXT,
    device_type device_type DEFAULT 'Other',
    platform platform DEFAULT 'Other',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT current_timestamp,
    expires_at TIMESTAMP,
    logout_time TIMESTAMP,
    logout_reason TEXT
);

-- RECOVERY CODES: if user credentials is forgotten
CREATE TABLE recovery_codes (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    code TEXT NOT NULL,
    used BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT current_timestamp
);

-- AUDIT LOGS: auditing trails with triggers.
CREATE TABLE audit_log (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_name TEXT NOT NULL,
    record_id BIGINT,
    operation TEXT NOT NULL, -- INSERT, UPDATE, DELETE
    user_id BIGINT,          -- optional
    timestamp TIMESTAMP DEFAULT current_timestamp,
    changes JSONB
);

CREATE OR REPLACE FUNCTION audit_trigger_func() RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO audit_log (table_name, record_id, operation, user_id, changes)
    VALUES (
        TG_TABLE_NAME,
        NEW.id,
        TG_OP,
        current_setting('myapp.current_user_id', true)::BIGINT,
        row_to_json(NEW)
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER audit_users
AFTER INSERT OR UPDATE OR DELETE ON users
FOR EACH ROW EXECUTE FUNCTION audit_trigger_func();

-- GUARDIAN RELATIONS: students guardians relationships if not none
CREATE TABLE guardian_relations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    guardian_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    relationship VARCHAR(50), -- e.g., Mother, Father, Legal Guardian
    contact_no VARCHAR(20),
    notes TEXT,
    created_at TIMESTAMP DEFAULT current_timestamp
);


